{"ast":null,"code":"import React, { useState, useEffect, useReducer } from 'react';\nimport axios from 'axios';\nimport DataFetchForm from '../pages/testHook/DataFetchForm';\n/**\n * 请求接口的封装\n */\n\nconst useHackerNewsApi = () => {\n  const [data, setData] = useState({\n    hits: []\n  });\n  const [url, setUrl] = useState('https://hn.algolia.com/api/v1/search?query=redux');\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsError(false);\n      setIsLoading(true);\n\n      try {\n        const result = await axios(url);\n        setData(result);\n      } catch (error) {\n        setIsError(true);\n      }\n\n      setIsLoading(false);\n    };\n\n    fetchData();\n  }, [url]);\n  return [{\n    data,\n    isLoading,\n    isError\n  }, setUrl];\n};\n/**\n * 请求接口进一步封装\n * \n * url和返回值可配置\n */\n\n\nconst useDataApi = (initUrl, initData) => {\n  const [data, setData] = useState(initData);\n  const [url, setUrl] = useState(initUrl);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsError(false);\n      setIsLoading(true);\n\n      try {\n        const res = await axios(url);\n        setData(res);\n      } catch (error) {\n        setIsError(true);\n      }\n\n      setIsLoading(false);\n    };\n\n    fetchData();\n  }, [url]);\n  return [{\n    data,\n    isLoading,\n    isError\n  }, setUrl];\n};\n/**\n * 使用useReducer改造useDataApi\n */\n\n\nconst dataFetchReducer = (state, action) => {\n  switch (action.type) {\n    case 'FETCH_INIT':\n      return { ...state,\n        isLoading: true,\n        isError: false\n      };\n\n    case 'FETCH_SUCCESS':\n      return { ...state,\n        isLoading: false,\n        isError: false,\n        data: action.payload\n      };\n\n    case 'FETCH_FAILURE':\n      return { ...state,\n        isLoading: false,\n        isError: true\n      };\n\n    default:\n      throw new Error();\n  }\n};\n\nconst useDataReducerApi = (initUrl, initData) => {\n  const [url, setUrl] = useState(initUrl);\n  const [state, dispatch] = useReducer(dataFetchReducer, {\n    isLoading: false,\n    isError: false,\n    data: initData\n  });\n  useEffect(() => {\n    let didCancel = false; // 是否组件被卸载\n\n    const fetchData = async () => {\n      dispatch({\n        type: 'FETCH_INIT'\n      });\n\n      try {\n        const res = await axios(url);\n\n        if (!didCancel) {\n          dispatch({\n            type: 'FETCH_SUCCESS',\n            payload: res\n          });\n        }\n      } catch (error) {\n        if (!didCancel) {\n          dispatch({\n            type: 'FETCH_FAILURE'\n          });\n        }\n      }\n    };\n\n    fetchData();\n    return () => {\n      //函数卸载时 设置改状态为true 这将使接口请求后不会触发state的更改\n\n      /**\n       * 参考文档： \n       * https://www.robinwieruch.de/react-hooks-fetch-data\n       * 注意：实际上，数据获取不会中止-这可以通过Axios Cancellation来实现-但是，已卸载的\n      组件不再执行状态转换。由于Axios Cancellation在我眼中并不是最好的API，因此该防止设置状态的布尔值标记也可以完成此工作。\n       *  */\n      didCancel = true;\n    };\n  }, [url]);\n  return [state, setUrl];\n};\n\nexport { useHackerNewsApi, useDataApi, useDataReducerApi };","map":{"version":3,"sources":["/Users/angentle/Documents/my_Workspace/REACT/isz-h5-hook/src/hooks/useHackerNewsApi.js"],"names":["React","useState","useEffect","useReducer","axios","DataFetchForm","useHackerNewsApi","data","setData","hits","url","setUrl","isLoading","setIsLoading","isError","setIsError","fetchData","result","error","useDataApi","initUrl","initData","res","dataFetchReducer","state","action","type","payload","Error","useDataReducerApi","dispatch","didCancel"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useReducer } from 'react'\nimport axios from 'axios'\nimport DataFetchForm from '../pages/testHook/DataFetchForm';\n\n/**\n * 请求接口的封装\n */\n\nconst useHackerNewsApi = () => {\n    const [data, setData] = useState({ hits: [] });\n    const [url, setUrl] = useState(\n        'https://hn.algolia.com/api/v1/search?query=redux',\n    );\n    const [isLoading, setIsLoading] = useState(false);\n    const [isError, setIsError] = useState(false);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            setIsError(false);\n            setIsLoading(true);\n\n            try {\n                const result = await axios(url);\n\n                setData(result);\n            } catch (error) {\n                setIsError(true);\n            }\n\n            setIsLoading(false);\n        };\n\n        fetchData();\n    }, [url]);\n\n    return [{ data, isLoading, isError }, setUrl];\n}\n\n/**\n * 请求接口进一步封装\n * \n * url和返回值可配置\n */\n\nconst useDataApi = (initUrl, initData) => {\n    const [data, setData] = useState(initData)\n    const [url, setUrl] = useState(initUrl)\n    const [isLoading, setIsLoading] = useState(false)\n    const [isError, setIsError] = useState(false)\n\n\n    useEffect(() => {\n        const fetchData = async () => {\n            setIsError(false)\n            setIsLoading(true)\n\n            try {\n                const res = await axios(url)\n                setData(res)\n            } catch (error) {\n                setIsError(true)\n            }\n\n            setIsLoading(false)\n        }\n\n        fetchData()\n    }, [url])\n\n    return [{ data, isLoading, isError }, setUrl]\n}\n\n/**\n * 使用useReducer改造useDataApi\n */\n\nconst dataFetchReducer = (state, action) => {\n    switch (action.type) {\n        case 'FETCH_INIT':\n            return {\n                ...state,\n                isLoading: true,\n                isError: false\n            };\n        case 'FETCH_SUCCESS':\n            return {\n                ...state,\n                isLoading: false,\n                isError: false,\n                data: action.payload\n            };\n        case 'FETCH_FAILURE':\n            return {\n                ...state,\n                isLoading: false,\n                isError: true\n            };\n        default:\n            throw new Error();\n    }\n};\n\nconst useDataReducerApi = (initUrl, initData) => {\n    const [url, setUrl] = useState(initUrl)\n\n    const [state, dispatch] = useReducer(dataFetchReducer, {\n        isLoading: false,\n        isError: false,\n        data: initData\n    })\n\n    useEffect(() => {\n        let didCancel = false // 是否组件被卸载\n\n        const fetchData = async () => {\n\n            dispatch({ type: 'FETCH_INIT' })\n            try {\n                const res = await axios(url)\n                if (!didCancel) {\n                    dispatch({ type: 'FETCH_SUCCESS', payload: res })\n                }\n            } catch (error) {\n                if (!didCancel) {\n                    dispatch({ type: 'FETCH_FAILURE' })\n                }\n            }\n\n        }\n\n        fetchData()\n        return () => {\n            //函数卸载时 设置改状态为true 这将使接口请求后不会触发state的更改\n\n            /**\n             * 参考文档： \n             * https://www.robinwieruch.de/react-hooks-fetch-data\n             * 注意：实际上，数据获取不会中止-这可以通过Axios Cancellation来实现-但是，已卸载的\n            组件不再执行状态转换。由于Axios Cancellation在我眼中并不是最好的API，因此该防止设置状态的布尔值标记也可以完成此工作。\n             *  */\n\n            didCancel = true\n        }\n    }, [url])\n\n    return [state, setUrl]\n}\n\nexport { useHackerNewsApi, useDataApi, useDataReducerApi };"]},"metadata":{},"sourceType":"module"}