{"ast":null,"code":"var _jsxFileName = \"/Users/angentle/Documents/my_Workspace/REACT/isz-h5-hook/src/pages/testHook/DataFetchForm.js\";\nimport React, { useState, useEffect } from 'react';\nimport './DataFetch.scss';\nimport axios from 'axios';\nimport { useHackerNewsApi, useDataApi, useDataReducerApi } from '../../hooks/useHackerNewsApi'; // function DataFetchForm () {\n//     const [data, setData] = useState({ hits: [] });\n//     const [query, setQuery] = useState('redux');\n//     const [url, setUrl] = useState(\n//         'https://hn.algolia.com/api/v1/search?query=redux',\n//     );\n//     const [isLoading, setIsLoading] = useState(false);\n//     const [isError, setIsError] = useState(false);\n//     useEffect(() => {\n//         const fetchData = async () => {\n//             setIsError(false);\n//             setIsLoading(true);\n//             try {\n//                 const result = await axios(url);\n//                 setData(result);\n//             } catch (error) {\n//                 setIsError(true);\n//             }\n//             setIsLoading(false);\n//         };\n//         fetchData();\n//     }, [url]);\n//     return (\n//         <>\n//             <form onSubmit={event => {\n//                 setUrl(`http://hn.algolia.com/api/v1/search?query=${query}`);\n//                 // 阻止单击“提交”按钮时浏览器会重新加载\n//                 event.preventDefault();\n//             }}>\n//                 <input\n//                     type=\"text\"\n//                     value={query}\n//                     onChange={event => setQuery(event.target.value)}\n//                 />\n//                 <button type=\"submit\">Search</button>\n//             </form>\n//             {isError && <div>Something went wrong ...</div>}\n//             {isLoading ? (\n//                 <div>Loading ...</div>\n//             ) : (\n//                     <ul className='dataFetch'>\n//                         {data.hits.map(item => (\n//                             <li key={item.objectID}>\n//                                 <a href={item.url}>{item.title}</a>\n//                             </li>\n//                         ))}\n//                     </ul>\n//                 )}\n//         </>\n//     )\n// }\n\n/**\n * 使用useHackerNewsApi 改造\n */\n// const DataFetchForm = () => {\n//     const [query, setQuery] = useState('redux')\n//     const [{ data, isLoading, isError }, doFetch] = useHackerNewsApi()\n//     return (\n//         <>\n//             <form onSubmit={event => {\n//                 doFetch(`http://hn.algolia.com/api/v1/search?query=${query}`);\n//                 event.preventDefault();\n//             }}>\n//                 <input\n//                     type=\"text\"\n//                     value={query}\n//                     onChange={event => setQuery(event.target.value)}\n//                 />\n//                 <button type=\"submit\">Search</button>\n//                 {isError && <div>Something went wrong ...</div>}\n//                 {isLoading ? (\n//                     <div>Loading ...</div>\n//                 ) : (\n//                         <ul className='dataFetch'>\n//                             {data.hits.map(item => (\n//                                 <li key={item.objectID}>\n//                                     <a href={item.url}>{item.title}</a>\n//                                 </li>\n//                             ))}\n//                         </ul>\n//                     )}\n//             </form>\n//         </>\n//     )\n// }\n\n/**\n * 使用useDataApi改造\n */\n// const DataFetchForm = () => {\n//     const [query, setQuery] = useState('redux')\n//     const [{ data, isLoading, isError }, doFetch] =\n//         useDataApi(\n//             `http://hn.algolia.com/api/v1/search?query=${query}`,\n//             { hits: [] }\n//         )\n//     return <>\n//         <form\n//             onSubmit={event => {\n//                 doFetch(\n//                     `http://hn.algolia.com/api/v1/search?query=${query}`,\n//                 );\n//                 event.preventDefault();\n//             }}\n//         >\n//             <input\n//                 type=\"text\"\n//                 value={query}\n//                 onChange={event => setQuery(event.target.value)}\n//             />\n//             <button type=\"submit\">Search</button>\n//         </form>\n//         {isError && <div>Something went wrong ...</div>}\n//         {isLoading ? (\n//             <div>Loading ...</div>\n//         ) : (\n//                 <ul>\n//                     {data.hits.map(item => (\n//                         <li key={item.objectID}>\n//                             <a href={item.url}>{item.title}</a>\n//                         </li>\n//                     ))}\n//                 </ul>\n//             )}\n//     </>\n// }\n\n/**\n * 使用useDataReducerApi 改造\n */\n\nconst DataFetchForm = () => {\n  const [query, setQuery] = useState('redux');\n  const [{\n    data,\n    isLoading,\n    isError\n  }, doFetch] = useDataReducerApi(`http://hn.algolia.com/api/v1/search?query=${query}`, {\n    hits: []\n  });\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: event => {\n      doFetch(`http://hn.algolia.com/api/v1/search?query=${query}`);\n      event.preventDefault();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: query,\n    onChange: event => setQuery(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 13\n    }\n  }, \"Search\")), isError && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 21\n    }\n  }, \"Something went wrong ...\"), isLoading ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 13\n    }\n  }, \"Loading ...\") : /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 17\n    }\n  }, data.hits.map(item => /*#__PURE__*/React.createElement(\"li\", {\n    key: item.objectID,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    href: item.url,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 29\n    }\n  }, item.title)))));\n};\n\nexport default DataFetchForm;","map":{"version":3,"sources":["/Users/angentle/Documents/my_Workspace/REACT/isz-h5-hook/src/pages/testHook/DataFetchForm.js"],"names":["React","useState","useEffect","axios","useHackerNewsApi","useDataApi","useDataReducerApi","DataFetchForm","query","setQuery","data","isLoading","isError","doFetch","hits","event","preventDefault","target","value","map","item","objectID","url","title"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAO,kBAAP;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,gBAAT,EAA2BC,UAA3B,EAAuCC,iBAAvC,QAAgE,8BAAhE,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;;AAGA;;;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;AAEA;;;;AAIA,MAAMC,aAAa,GAAG,MAAM;AACxB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,OAAD,CAAlC;AACA,QAAM,CAAC;AAAES,IAAAA,IAAF;AAAQC,IAAAA,SAAR;AAAmBC,IAAAA;AAAnB,GAAD,EAA+BC,OAA/B,IACFP,iBAAiB,CACZ,6CAA4CE,KAAM,EADtC,EAEb;AAAEM,IAAAA,IAAI,EAAE;AAAR,GAFa,CADrB;AAMA,sBAAO,uDACH;AACI,IAAA,QAAQ,EAAEC,KAAK,IAAI;AACfF,MAAAA,OAAO,CACF,6CAA4CL,KAAM,EADhD,CAAP;AAIAO,MAAAA,KAAK,CAACC,cAAN;AACH,KAPL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBASI;AACI,IAAA,IAAI,EAAC,MADT;AAEI,IAAA,KAAK,EAAER,KAFX;AAGI,IAAA,QAAQ,EAAEO,KAAK,IAAIN,QAAQ,CAACM,KAAK,CAACE,MAAN,CAAaC,KAAd,CAH/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATJ,eAcI;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAdJ,CADG,EAkBFN,OAAO,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAlBT,EAoBFD,SAAS,gBACN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADM,gBAGF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKD,IAAI,CAACI,IAAL,CAAUK,GAAV,CAAcC,IAAI,iBACf;AAAI,IAAA,GAAG,EAAEA,IAAI,CAACC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAG,IAAA,IAAI,EAAED,IAAI,CAACE,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoBF,IAAI,CAACG,KAAzB,CADJ,CADH,CADL,CAvBL,CAAP;AAkCH,CA1CD;;AA4CA,eAAehB,aAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport './DataFetch.scss'\nimport axios from 'axios';\nimport { useHackerNewsApi, useDataApi, useDataReducerApi } from '../../hooks/useHackerNewsApi';\n\n// function DataFetchForm () {\n//     const [data, setData] = useState({ hits: [] });\n//     const [query, setQuery] = useState('redux');\n//     const [url, setUrl] = useState(\n//         'https://hn.algolia.com/api/v1/search?query=redux',\n//     );\n//     const [isLoading, setIsLoading] = useState(false);\n//     const [isError, setIsError] = useState(false);\n\n//     useEffect(() => {\n//         const fetchData = async () => {\n//             setIsError(false);\n//             setIsLoading(true);\n\n//             try {\n//                 const result = await axios(url);\n\n//                 setData(result);\n//             } catch (error) {\n//                 setIsError(true);\n//             }\n\n//             setIsLoading(false);\n//         };\n\n//         fetchData();\n//     }, [url]);\n\n//     return (\n//         <>\n//             <form onSubmit={event => {\n//                 setUrl(`http://hn.algolia.com/api/v1/search?query=${query}`);\n\n//                 // 阻止单击“提交”按钮时浏览器会重新加载\n//                 event.preventDefault();\n//             }}>\n//                 <input\n//                     type=\"text\"\n//                     value={query}\n//                     onChange={event => setQuery(event.target.value)}\n//                 />\n//                 <button type=\"submit\">Search</button>\n//             </form>\n\n//             {isError && <div>Something went wrong ...</div>}\n//             {isLoading ? (\n//                 <div>Loading ...</div>\n//             ) : (\n//                     <ul className='dataFetch'>\n//                         {data.hits.map(item => (\n//                             <li key={item.objectID}>\n//                                 <a href={item.url}>{item.title}</a>\n//                             </li>\n//                         ))}\n//                     </ul>\n//                 )}\n\n//         </>\n\n//     )\n// }\n\n\n/**\n * 使用useHackerNewsApi 改造\n */\n// const DataFetchForm = () => {\n//     const [query, setQuery] = useState('redux')\n//     const [{ data, isLoading, isError }, doFetch] = useHackerNewsApi()\n\n//     return (\n//         <>\n//             <form onSubmit={event => {\n//                 doFetch(`http://hn.algolia.com/api/v1/search?query=${query}`);\n\n//                 event.preventDefault();\n//             }}>\n//                 <input\n//                     type=\"text\"\n//                     value={query}\n//                     onChange={event => setQuery(event.target.value)}\n//                 />\n//                 <button type=\"submit\">Search</button>\n//                 {isError && <div>Something went wrong ...</div>}\n//                 {isLoading ? (\n//                     <div>Loading ...</div>\n//                 ) : (\n//                         <ul className='dataFetch'>\n//                             {data.hits.map(item => (\n//                                 <li key={item.objectID}>\n//                                     <a href={item.url}>{item.title}</a>\n//                                 </li>\n//                             ))}\n//                         </ul>\n//                     )}\n//             </form>\n//         </>\n//     )\n// }\n\n/**\n * 使用useDataApi改造\n */\n// const DataFetchForm = () => {\n//     const [query, setQuery] = useState('redux')\n//     const [{ data, isLoading, isError }, doFetch] =\n//         useDataApi(\n//             `http://hn.algolia.com/api/v1/search?query=${query}`,\n//             { hits: [] }\n//         )\n\n//     return <>\n//         <form\n//             onSubmit={event => {\n//                 doFetch(\n//                     `http://hn.algolia.com/api/v1/search?query=${query}`,\n//                 );\n\n//                 event.preventDefault();\n//             }}\n//         >\n//             <input\n//                 type=\"text\"\n//                 value={query}\n//                 onChange={event => setQuery(event.target.value)}\n//             />\n//             <button type=\"submit\">Search</button>\n//         </form>\n\n//         {isError && <div>Something went wrong ...</div>}\n\n//         {isLoading ? (\n//             <div>Loading ...</div>\n//         ) : (\n//                 <ul>\n//                     {data.hits.map(item => (\n//                         <li key={item.objectID}>\n//                             <a href={item.url}>{item.title}</a>\n//                         </li>\n//                     ))}\n//                 </ul>\n//             )}\n\n//     </>\n\n// }\n\n/**\n * 使用useDataReducerApi 改造\n */\n\nconst DataFetchForm = () => {\n    const [query, setQuery] = useState('redux')\n    const [{ data, isLoading, isError }, doFetch] =\n        useDataReducerApi(\n            `http://hn.algolia.com/api/v1/search?query=${query}`,\n            { hits: [] }\n        )\n\n    return <>\n        <form\n            onSubmit={event => {\n                doFetch(\n                    `http://hn.algolia.com/api/v1/search?query=${query}`,\n                );\n\n                event.preventDefault();\n            }}\n        >\n            <input\n                type=\"text\"\n                value={query}\n                onChange={event => setQuery(event.target.value)}\n            />\n            <button type=\"submit\">Search</button>\n        </form>\n\n        {isError && <div>Something went wrong ...</div>}\n\n        {isLoading ? (\n            <div>Loading ...</div>\n        ) : (\n                <ul>\n                    {data.hits.map(item => (\n                        <li key={item.objectID}>\n                            <a href={item.url}>{item.title}</a>\n                        </li>\n                    ))}\n                </ul>\n            )}\n\n    </>\n\n}\n\nexport default DataFetchForm;"]},"metadata":{},"sourceType":"module"}