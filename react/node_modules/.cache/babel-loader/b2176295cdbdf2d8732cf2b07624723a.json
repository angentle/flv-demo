{"ast":null,"code":"/* eslint-disable*/\nimport axios from 'axios';\nconst tempUrl = 'http://localhost:8086/apis';\naxios.defaults.timeout = 100000;\naxios.interceptors.request.use(config => {\n  return config;\n}, error => Promise.reject(error));\naxios.interceptors.response.use(response => {\n  if (response.status === 200) {\n    let msg = '';\n\n    switch (response.data.code) {\n      case 500:\n        // msg = '操作失败'\n        break;\n\n      case 0:\n        // msg = '没有查询到数据'\n        break;\n\n      case 500:\n        msg = '服务器异常';\n        break;\n\n      case 200:\n        //操作成功\n        break;\n\n      case 401:\n        msg = 'token过期';\n        break;\n\n      case 403:\n        msg = '权限不足';\n        break;\n\n      case 404:\n        msg = '参数检验失败';\n\n      default:\n    }\n\n    return response.data;\n  } else {\n    return {\n      code: 500,\n      msg: '服务器异常'\n    };\n  }\n}, error => {\n  return {\n    code: 500,\n    msg: '服务器异常'\n  };\n});\nconst baseAxios = axios.create({\n  baseURL: tempUrl,\n  timeout: 1000,\n  headers: {\n    'X-Custom-Header': 'angentle-koa-server'\n  }\n});\nbaseAxios.interceptors.response.use(response => {\n  console.log('response', response);\n\n  if (response.status === 200) {\n    let msg = '';\n\n    switch (response.data.code) {\n      case 500:\n        // msg = '操作失败'\n        break;\n\n      case 0:\n        // msg = '没有查询到数据'\n        break;\n\n      case 500:\n        msg = '服务器异常';\n        break;\n\n      case 200:\n        //操作成功\n        break;\n\n      case 401:\n        msg = 'token过期';\n        break;\n\n      case 403:\n        msg = '权限不足';\n        break;\n\n      case 404:\n        msg = '参数检验失败';\n\n      default:\n    }\n\n    return response.data;\n  } else {\n    return {\n      code: 500,\n      msg: '服务器异常'\n    };\n  }\n}, error => {\n  console.log('error', error.message);\n  debugger;\n\n  if (error.message === 'error timeout of 1000ms exceeded') {\n    console.log('请求超时');\n  }\n\n  return {\n    code: 500,\n    msg: '服务器异常'\n  };\n});\nexport default {\n  get(url, params = {}, headers = {}, loading = true) {\n    return axios.get(url, {\n      params,\n      headers,\n      loading\n    });\n  },\n\n  post(url, params = {}, headers = {}, loading = true) {\n    return axios.post(url, params, headers, loading);\n  },\n\n  get1(url, params = {}, headers = {}, loading = true) {\n    return baseAxios.get(url, {\n      params,\n      headers,\n      loading\n    });\n  },\n\n  post1(url, params = {}, headers = {}, loading = true) {\n    return baseAxios.post(url, params, headers, loading);\n  }\n\n};","map":{"version":3,"sources":["/Users/angentle/Documents/my_Workspace/REACT/isz-h5-hook/src/api/service.js"],"names":["axios","tempUrl","defaults","timeout","interceptors","request","use","config","error","Promise","reject","response","status","msg","data","code","baseAxios","create","baseURL","headers","console","log","message","get","url","params","loading","post","get1","post1"],"mappings":"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","sourcesContent":["/* eslint-disable*/\nimport axios from 'axios'\n\nconst tempUrl = 'http://localhost:8086/apis'\naxios.defaults.timeout = 100000\n\naxios.interceptors.request.use(\n    config => {\n        return config\n    },\n    error => Promise.reject(error)\n)\n\naxios.interceptors.response.use(\n\n    response => {\n        if (response.status === 200) {\n            let msg = ''\n\n            switch (response.data.code) {\n                case 500:\n                    // msg = '操作失败'\n                    break\n                case 0:\n                    // msg = '没有查询到数据'\n                    break\n                case 500:\n                    msg = '服务器异常'\n                    break\n                case 200:\n                    //操作成功\n                    break\n                case 401:\n                    msg = 'token过期'\n                    break\n                case 403:\n                    msg = '权限不足'\n                    break\n                case 404:\n                    msg = '参数检验失败'\n                default:\n            }\n            return response.data\n        } else {\n            return {\n                code: 500,\n                msg: '服务器异常'\n            }\n        }\n    },\n    error => {\n        return {\n            code: 500,\n            msg: '服务器异常'\n        }\n    }\n)\n\n\nconst baseAxios = axios.create({\n    baseURL: tempUrl,\n    timeout: 1000,\n    headers: { 'X-Custom-Header': 'angentle-koa-server' }\n})\n\nbaseAxios.interceptors.response.use(\n\n    response => {\n        console.log('response', response)\n        if (response.status === 200) {\n            let msg = ''\n\n            switch (response.data.code) {\n                case 500:\n                    // msg = '操作失败'\n                    break\n                case 0:\n                    // msg = '没有查询到数据'\n                    break\n                case 500:\n                    msg = '服务器异常'\n                    break\n                case 200:\n                    //操作成功\n                    break\n                case 401:\n                    msg = 'token过期'\n                    break\n                case 403:\n                    msg = '权限不足'\n                    break\n                case 404:\n                    msg = '参数检验失败'\n                default:\n            }\n            return response.data\n        } else {\n            return {\n                code: 500,\n                msg: '服务器异常'\n            }\n        }\n    },\n    error => {\n        console.log('error', error.message)\n\n        debugger\n        if (error.message === 'error timeout of 1000ms exceeded') {\n            console.log('请求超时')\n        }\n\n        return {\n            code: 500,\n            msg: '服务器异常'\n        }\n    }\n)\n\nexport default {\n    get (url, params = {}, headers = {}, loading = true) {\n        return axios.get(url, {\n            params,\n            headers,\n            loading\n        })\n    },\n    post (url, params = {}, headers = {}, loading = true) {\n        return axios.post(url, params, headers, loading)\n    },\n    get1 (url, params = {}, headers = {}, loading = true) {\n        return baseAxios.get(url, {\n            params,\n            headers,\n            loading\n        })\n    },\n    post1 (url, params = {}, headers = {}, loading = true) {\n        return baseAxios.post(url, params, headers, loading)\n    }\n}\n"]},"metadata":{},"sourceType":"module"}